apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'tomcat'
apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'eclipse'
//apply plugin: 'jetty'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'


ext {
    springVersion = "4.0.4.RELEASE"
    springSecurity = "3.2.3.RELEASE"
//    jacksonVersion = "1.9.13"
    jacksonVersion = "2.3.3"
    jerseyVersion = "2.8"
    h2Version = "1.3.154"
    slf4jVersion = "1.7.7"
    logbackVersion = "1.1.2"
    groovyVersion = "2.2.2"
    tomcatVersion = '7.0.25'
    mockitoVersion = '1.9.5'
    environmentBase = 'src/main/config/'
    env = "ci"

    version = '1.0'

}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath   'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.2'
    }
}

def properties = new Properties()
    file(environmentBase + env + '/gradle.properties').withReader {
    properties.load(it)
    project.ext.props=properties
    //properties.each { String name, value -> project.ext.set(name, value) }
}

//sourceCompatibility = 1.5

//sourceSets {
//    test {
//        resources {
//            //srcDir 'src/test/resources'
//            srcDir 'src/test/groovy'
//            include '**/*.xml'
//        }
//    }
//}

repositories {
    mavenCentral()
}

dependencies {

    compile "com.h2database:h2:$h2Version",
        "org.springframework.security:spring-security-core:$springSecurity",

        //"commons-io:commons-io:$commonsIoVersion",

        "org.glassfish.jersey.ext:jersey-spring3:$jerseyVersion",
        "org.glassfish.jersey.ext:jersey-declarative-linking:$jerseyVersion",
        "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
        "org.glassfish.jersey.core:jersey-server:$jerseyVersion",
        "org.glassfish.jersey.core:jersey-common:$jerseyVersion",
        "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion",


        //"org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
        "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion",


        "org.springframework:spring-core:$springVersion",
        "org.springframework:spring-beans:$springVersion",
        "org.springframework:spring-context:$springVersion",
        "org.springframework:spring-aop:$springVersion",
        "org.springframework:spring-webmvc:$springVersion",
        "javax.validation:validation-api:1.1.0.Final",

        "org.slf4j:slf4j-api:$slf4jVersion",
        "ch.qos.logback:logback-classic:$logbackVersion",
        "ch.qos.logback:logback-core:$logbackVersion",
        "org.mockito:mockito-all:1.8.5"

        //"joda-time:joda-time:2.1"

    // Pull in test-time dependencies.
    testCompile "junit:junit:4.8.2",
        "org.mockito:mockito-core:$mockitoVersion",
        //"org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion",
        //"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:$jerseyVersion",
        //"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-simple:$jerseyVersion",
        //"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-external:$jerseyVersion",
        //"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:$jerseyVersion",
        //"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:$jerseyVersion",
        "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion",

        "org.springframework:spring-test:$springVersion"


    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // Pull in tomcat dependencies
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: "org.eclipse.jdt.core.compiler", module: "ecj"
    }

    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"


}

/* resource java-groovy joint compilation issue */
sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

war {
    baseName = "rest-basic"
}


gretty {
    scanInterval = 1
    fastReload = true
    contextPath = '/rest-basic'
    fileLogEnabled = false
}

test {
    testLogging.showStandardStreams = true
}

//[jettyRun, jettyRunWar, jettyStop]*.stopPort = 8081
//[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

//task integrationTest(type: Test) {
//    include '**/*IntegrationTest*.*'
//    doFirst {
//        jettyRun.daemon = true
//        jettyRun.execute()
//    }
//    doLast {
//        jettyStop.execute()
//    }

//}

