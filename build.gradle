apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'tomcat'
apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'eclipse'
//apply plugin: 'jetty'


ext {
    springVersion = "4.0.4.RELEASE"
    springSecurity = "3.2.3.RELEASE"
//    jacksonVersion = "1.9.13"
    jacksonVersion = "2.3.3"
    jerseyVersion = "2.8"
    h2Version = "1.3.154"
    slf4jVersion = "1.7.7"
    logbackVersion = "1.1.2"
    groovyVersion = "2.2.2"
    tomcatVersion = '7.0.25'
    mockitoVersion = '1.9.5'
    swaggerVersion='1.3.5'
    environmentBase = 'src/main/config/'
    env = "ci"

    version = '1.0'

}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.2'
        classpath 'org.akhikhl.gretty:gretty-plugin:0.0.17'
    }
}

apply plugin: 'gretty'
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'


repositories {
    jcenter()
}

apply plugin: 'gretty'
def properties = new Properties()
    file(environmentBase + env + '/gradle.properties').withReader {
    properties.load(it)
    project.ext.props=properties
    //properties.each { String name, value -> project.ext.set(name, value) }
}

//sourceCompatibility = 1.5

//sourceSets {
//    test {
//        resources {
//            //srcDir 'src/test/resources'
//            srcDir 'src/test/groovy'
//            include '**/*.xml'
//        }
//    }
//}

repositories {
    mavenCentral()
}

dependencies {
    // ------------------------------ compile---------------------
    compile "org.springframework.security:spring-security-core:$springSecurity"
    compile "org.glassfish.jersey.ext:jersey-spring3:$jerseyVersion"
    compile  "org.glassfish.jersey.ext:jersey-declarative-linking:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-common:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"

    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"

    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "javax.validation:validation-api:1.1.0.Final"

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "ch.qos.logback:logback-core:$logbackVersion"
    //compile "com.wordnik:swagger-jaxrs_2.10:$swaggerVersion"
    compile "joda-time:joda-time:2.1"

    // ------------------------------ testCompile---------------------
    testCompile "junit:junit:4.8.2"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    //testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
    testCompile "org.mockito:mockito-all:1.8.5"

    testCompile "org.springframework:spring-test:$springVersion"
    testCompile  "org.codehaus.groovy:groovy-all:$groovyVersion"


    // ------------------------------ providedCompile---------------------
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'


    // ------------------------------ specail tomcat---------------------
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}", "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: "org.eclipse.jdt.core.compiler", module: "ecj"
    }



}

/* resource java-groovy joint compilation issue */
sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

war {
    baseName = "rest-basic"
}


gretty {
    scanInterval = 1
    fastReload = true
    contextPath = '/rest-basic'
    fileLogEnabled = false
}

test {
    testLogging.showStandardStreams = true
}

//[jettyRun, jettyRunWar, jettyStop]*.stopPort = 8081
//[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

//task integrationTest(type: Test) {
//    include '**/*IntegrationTest*.*'
//    doFirst {
//        jettyRun.daemon = true
//        jettyRun.execute()
//    }
//    doLast {
//        jettyStop.execute()
//    }

//}

